# coding: utf-8

"""
    Continuing Education API

    This API delivers data for the Continuing Education project.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdmissionGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'birth_date': 'str',
        'birth_location': 'str',
        'birth_country': 'str',
        'citizenship': 'str',
        'formation': 'FormationBasicGet',
        'admission_email': 'str',
        'state': 'StateEnum',
        'phone_mobile': 'str',
        'high_school_diploma': 'bool',
        'high_school_graduation_year': 'int',
        'last_degree_level': 'str',
        'last_degree_field': 'str',
        'last_degree_institution': 'str',
        'last_degree_graduation_year': 'int',
        'other_educational_background': 'str',
        'professional_status': 'str',
        'current_occupation': 'str',
        'current_employer': 'str',
        'activity_sector': 'str',
        'past_professional_activities': 'str',
        'motivation': 'str',
        'professional_impact': 'str',
        'awareness_ucl_website': 'bool',
        'awareness_formation_website': 'bool',
        'awareness_press': 'bool',
        'awareness_facebook': 'bool',
        'awareness_linkedin': 'bool',
        'awareness_customized_mail': 'bool',
        'awareness_emailing': 'bool',
        'awareness_other': 'str'
    }

    attribute_map = {
        'birth_date': 'birth_date',
        'birth_location': 'birth_location',
        'birth_country': 'birth_country',
        'citizenship': 'citizenship',
        'formation': 'formation',
        'admission_email': 'admission_email',
        'state': 'state',
        'phone_mobile': 'phone_mobile',
        'high_school_diploma': 'high_school_diploma',
        'high_school_graduation_year': 'high_school_graduation_year',
        'last_degree_level': 'last_degree_level',
        'last_degree_field': 'last_degree_field',
        'last_degree_institution': 'last_degree_institution',
        'last_degree_graduation_year': 'last_degree_graduation_year',
        'other_educational_background': 'other_educational_background',
        'professional_status': 'professional_status',
        'current_occupation': 'current_occupation',
        'current_employer': 'current_employer',
        'activity_sector': 'activity_sector',
        'past_professional_activities': 'past_professional_activities',
        'motivation': 'motivation',
        'professional_impact': 'professional_impact',
        'awareness_ucl_website': 'awareness_ucl_website',
        'awareness_formation_website': 'awareness_formation_website',
        'awareness_press': 'awareness_press',
        'awareness_facebook': 'awareness_facebook',
        'awareness_linkedin': 'awareness_linkedin',
        'awareness_customized_mail': 'awareness_customized_mail',
        'awareness_emailing': 'awareness_emailing',
        'awareness_other': 'awareness_other'
    }

    def __init__(self, birth_date=None, birth_location=None, birth_country=None, citizenship=None, formation=None, admission_email=None, state=None, phone_mobile=None, high_school_diploma=None, high_school_graduation_year=None, last_degree_level=None, last_degree_field=None, last_degree_institution=None, last_degree_graduation_year=None, other_educational_background=None, professional_status=None, current_occupation=None, current_employer=None, activity_sector=None, past_professional_activities=None, motivation=None, professional_impact=None, awareness_ucl_website=None, awareness_formation_website=None, awareness_press=None, awareness_facebook=None, awareness_linkedin=None, awareness_customized_mail=None, awareness_emailing=None, awareness_other=None):  # noqa: E501
        """AdmissionGet - a model defined in OpenAPI"""  # noqa: E501

        self._birth_date = None
        self._birth_location = None
        self._birth_country = None
        self._citizenship = None
        self._formation = None
        self._admission_email = None
        self._state = None
        self._phone_mobile = None
        self._high_school_diploma = None
        self._high_school_graduation_year = None
        self._last_degree_level = None
        self._last_degree_field = None
        self._last_degree_institution = None
        self._last_degree_graduation_year = None
        self._other_educational_background = None
        self._professional_status = None
        self._current_occupation = None
        self._current_employer = None
        self._activity_sector = None
        self._past_professional_activities = None
        self._motivation = None
        self._professional_impact = None
        self._awareness_ucl_website = None
        self._awareness_formation_website = None
        self._awareness_press = None
        self._awareness_facebook = None
        self._awareness_linkedin = None
        self._awareness_customized_mail = None
        self._awareness_emailing = None
        self._awareness_other = None
        self.discriminator = None

        if birth_date is not None:
            self.birth_date = birth_date
        if birth_location is not None:
            self.birth_location = birth_location
        if birth_country is not None:
            self.birth_country = birth_country
        if citizenship is not None:
            self.citizenship = citizenship
        if formation is not None:
            self.formation = formation
        if admission_email is not None:
            self.admission_email = admission_email
        if state is not None:
            self.state = state
        if phone_mobile is not None:
            self.phone_mobile = phone_mobile
        if high_school_diploma is not None:
            self.high_school_diploma = high_school_diploma
        if high_school_graduation_year is not None:
            self.high_school_graduation_year = high_school_graduation_year
        if last_degree_level is not None:
            self.last_degree_level = last_degree_level
        if last_degree_field is not None:
            self.last_degree_field = last_degree_field
        if last_degree_institution is not None:
            self.last_degree_institution = last_degree_institution
        if last_degree_graduation_year is not None:
            self.last_degree_graduation_year = last_degree_graduation_year
        if other_educational_background is not None:
            self.other_educational_background = other_educational_background
        if professional_status is not None:
            self.professional_status = professional_status
        if current_occupation is not None:
            self.current_occupation = current_occupation
        if current_employer is not None:
            self.current_employer = current_employer
        if activity_sector is not None:
            self.activity_sector = activity_sector
        if past_professional_activities is not None:
            self.past_professional_activities = past_professional_activities
        if motivation is not None:
            self.motivation = motivation
        if professional_impact is not None:
            self.professional_impact = professional_impact
        if awareness_ucl_website is not None:
            self.awareness_ucl_website = awareness_ucl_website
        if awareness_formation_website is not None:
            self.awareness_formation_website = awareness_formation_website
        if awareness_press is not None:
            self.awareness_press = awareness_press
        if awareness_facebook is not None:
            self.awareness_facebook = awareness_facebook
        if awareness_linkedin is not None:
            self.awareness_linkedin = awareness_linkedin
        if awareness_customized_mail is not None:
            self.awareness_customized_mail = awareness_customized_mail
        if awareness_emailing is not None:
            self.awareness_emailing = awareness_emailing
        if awareness_other is not None:
            self.awareness_other = awareness_other

    @property
    def birth_date(self):
        """Gets the birth_date of this AdmissionGet.  # noqa: E501


        :return: The birth_date of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this AdmissionGet.


        :param birth_date: The birth_date of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._birth_date = birth_date

    @property
    def birth_location(self):
        """Gets the birth_location of this AdmissionGet.  # noqa: E501


        :return: The birth_location of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._birth_location

    @birth_location.setter
    def birth_location(self, birth_location):
        """Sets the birth_location of this AdmissionGet.


        :param birth_location: The birth_location of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._birth_location = birth_location

    @property
    def birth_country(self):
        """Gets the birth_country of this AdmissionGet.  # noqa: E501


        :return: The birth_country of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this AdmissionGet.


        :param birth_country: The birth_country of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._birth_country = birth_country

    @property
    def citizenship(self):
        """Gets the citizenship of this AdmissionGet.  # noqa: E501


        :return: The citizenship of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this AdmissionGet.


        :param citizenship: The citizenship of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._citizenship = citizenship

    @property
    def formation(self):
        """Gets the formation of this AdmissionGet.  # noqa: E501


        :return: The formation of this AdmissionGet.  # noqa: E501
        :rtype: FormationBasicGet
        """
        return self._formation

    @formation.setter
    def formation(self, formation):
        """Sets the formation of this AdmissionGet.


        :param formation: The formation of this AdmissionGet.  # noqa: E501
        :type: FormationBasicGet
        """

        self._formation = formation

    @property
    def admission_email(self):
        """Gets the admission_email of this AdmissionGet.  # noqa: E501


        :return: The admission_email of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._admission_email

    @admission_email.setter
    def admission_email(self, admission_email):
        """Sets the admission_email of this AdmissionGet.


        :param admission_email: The admission_email of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._admission_email = admission_email

    @property
    def state(self):
        """Gets the state of this AdmissionGet.  # noqa: E501


        :return: The state of this AdmissionGet.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AdmissionGet.


        :param state: The state of this AdmissionGet.  # noqa: E501
        :type: StateEnum
        """

        self._state = state

    @property
    def phone_mobile(self):
        """Gets the phone_mobile of this AdmissionGet.  # noqa: E501


        :return: The phone_mobile of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._phone_mobile

    @phone_mobile.setter
    def phone_mobile(self, phone_mobile):
        """Sets the phone_mobile of this AdmissionGet.


        :param phone_mobile: The phone_mobile of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._phone_mobile = phone_mobile

    @property
    def high_school_diploma(self):
        """Gets the high_school_diploma of this AdmissionGet.  # noqa: E501


        :return: The high_school_diploma of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._high_school_diploma

    @high_school_diploma.setter
    def high_school_diploma(self, high_school_diploma):
        """Sets the high_school_diploma of this AdmissionGet.


        :param high_school_diploma: The high_school_diploma of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._high_school_diploma = high_school_diploma

    @property
    def high_school_graduation_year(self):
        """Gets the high_school_graduation_year of this AdmissionGet.  # noqa: E501


        :return: The high_school_graduation_year of this AdmissionGet.  # noqa: E501
        :rtype: int
        """
        return self._high_school_graduation_year

    @high_school_graduation_year.setter
    def high_school_graduation_year(self, high_school_graduation_year):
        """Sets the high_school_graduation_year of this AdmissionGet.


        :param high_school_graduation_year: The high_school_graduation_year of this AdmissionGet.  # noqa: E501
        :type: int
        """

        self._high_school_graduation_year = high_school_graduation_year

    @property
    def last_degree_level(self):
        """Gets the last_degree_level of this AdmissionGet.  # noqa: E501


        :return: The last_degree_level of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._last_degree_level

    @last_degree_level.setter
    def last_degree_level(self, last_degree_level):
        """Sets the last_degree_level of this AdmissionGet.


        :param last_degree_level: The last_degree_level of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._last_degree_level = last_degree_level

    @property
    def last_degree_field(self):
        """Gets the last_degree_field of this AdmissionGet.  # noqa: E501


        :return: The last_degree_field of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._last_degree_field

    @last_degree_field.setter
    def last_degree_field(self, last_degree_field):
        """Sets the last_degree_field of this AdmissionGet.


        :param last_degree_field: The last_degree_field of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._last_degree_field = last_degree_field

    @property
    def last_degree_institution(self):
        """Gets the last_degree_institution of this AdmissionGet.  # noqa: E501


        :return: The last_degree_institution of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._last_degree_institution

    @last_degree_institution.setter
    def last_degree_institution(self, last_degree_institution):
        """Sets the last_degree_institution of this AdmissionGet.


        :param last_degree_institution: The last_degree_institution of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._last_degree_institution = last_degree_institution

    @property
    def last_degree_graduation_year(self):
        """Gets the last_degree_graduation_year of this AdmissionGet.  # noqa: E501


        :return: The last_degree_graduation_year of this AdmissionGet.  # noqa: E501
        :rtype: int
        """
        return self._last_degree_graduation_year

    @last_degree_graduation_year.setter
    def last_degree_graduation_year(self, last_degree_graduation_year):
        """Sets the last_degree_graduation_year of this AdmissionGet.


        :param last_degree_graduation_year: The last_degree_graduation_year of this AdmissionGet.  # noqa: E501
        :type: int
        """

        self._last_degree_graduation_year = last_degree_graduation_year

    @property
    def other_educational_background(self):
        """Gets the other_educational_background of this AdmissionGet.  # noqa: E501


        :return: The other_educational_background of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._other_educational_background

    @other_educational_background.setter
    def other_educational_background(self, other_educational_background):
        """Sets the other_educational_background of this AdmissionGet.


        :param other_educational_background: The other_educational_background of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._other_educational_background = other_educational_background

    @property
    def professional_status(self):
        """Gets the professional_status of this AdmissionGet.  # noqa: E501


        :return: The professional_status of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._professional_status

    @professional_status.setter
    def professional_status(self, professional_status):
        """Sets the professional_status of this AdmissionGet.


        :param professional_status: The professional_status of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._professional_status = professional_status

    @property
    def current_occupation(self):
        """Gets the current_occupation of this AdmissionGet.  # noqa: E501


        :return: The current_occupation of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._current_occupation

    @current_occupation.setter
    def current_occupation(self, current_occupation):
        """Sets the current_occupation of this AdmissionGet.


        :param current_occupation: The current_occupation of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._current_occupation = current_occupation

    @property
    def current_employer(self):
        """Gets the current_employer of this AdmissionGet.  # noqa: E501


        :return: The current_employer of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._current_employer

    @current_employer.setter
    def current_employer(self, current_employer):
        """Sets the current_employer of this AdmissionGet.


        :param current_employer: The current_employer of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._current_employer = current_employer

    @property
    def activity_sector(self):
        """Gets the activity_sector of this AdmissionGet.  # noqa: E501


        :return: The activity_sector of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._activity_sector

    @activity_sector.setter
    def activity_sector(self, activity_sector):
        """Sets the activity_sector of this AdmissionGet.


        :param activity_sector: The activity_sector of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._activity_sector = activity_sector

    @property
    def past_professional_activities(self):
        """Gets the past_professional_activities of this AdmissionGet.  # noqa: E501


        :return: The past_professional_activities of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._past_professional_activities

    @past_professional_activities.setter
    def past_professional_activities(self, past_professional_activities):
        """Sets the past_professional_activities of this AdmissionGet.


        :param past_professional_activities: The past_professional_activities of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._past_professional_activities = past_professional_activities

    @property
    def motivation(self):
        """Gets the motivation of this AdmissionGet.  # noqa: E501


        :return: The motivation of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._motivation

    @motivation.setter
    def motivation(self, motivation):
        """Sets the motivation of this AdmissionGet.


        :param motivation: The motivation of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._motivation = motivation

    @property
    def professional_impact(self):
        """Gets the professional_impact of this AdmissionGet.  # noqa: E501


        :return: The professional_impact of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._professional_impact

    @professional_impact.setter
    def professional_impact(self, professional_impact):
        """Sets the professional_impact of this AdmissionGet.


        :param professional_impact: The professional_impact of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._professional_impact = professional_impact

    @property
    def awareness_ucl_website(self):
        """Gets the awareness_ucl_website of this AdmissionGet.  # noqa: E501


        :return: The awareness_ucl_website of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_ucl_website

    @awareness_ucl_website.setter
    def awareness_ucl_website(self, awareness_ucl_website):
        """Sets the awareness_ucl_website of this AdmissionGet.


        :param awareness_ucl_website: The awareness_ucl_website of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_ucl_website = awareness_ucl_website

    @property
    def awareness_formation_website(self):
        """Gets the awareness_formation_website of this AdmissionGet.  # noqa: E501


        :return: The awareness_formation_website of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_formation_website

    @awareness_formation_website.setter
    def awareness_formation_website(self, awareness_formation_website):
        """Sets the awareness_formation_website of this AdmissionGet.


        :param awareness_formation_website: The awareness_formation_website of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_formation_website = awareness_formation_website

    @property
    def awareness_press(self):
        """Gets the awareness_press of this AdmissionGet.  # noqa: E501


        :return: The awareness_press of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_press

    @awareness_press.setter
    def awareness_press(self, awareness_press):
        """Sets the awareness_press of this AdmissionGet.


        :param awareness_press: The awareness_press of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_press = awareness_press

    @property
    def awareness_facebook(self):
        """Gets the awareness_facebook of this AdmissionGet.  # noqa: E501


        :return: The awareness_facebook of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_facebook

    @awareness_facebook.setter
    def awareness_facebook(self, awareness_facebook):
        """Sets the awareness_facebook of this AdmissionGet.


        :param awareness_facebook: The awareness_facebook of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_facebook = awareness_facebook

    @property
    def awareness_linkedin(self):
        """Gets the awareness_linkedin of this AdmissionGet.  # noqa: E501


        :return: The awareness_linkedin of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_linkedin

    @awareness_linkedin.setter
    def awareness_linkedin(self, awareness_linkedin):
        """Sets the awareness_linkedin of this AdmissionGet.


        :param awareness_linkedin: The awareness_linkedin of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_linkedin = awareness_linkedin

    @property
    def awareness_customized_mail(self):
        """Gets the awareness_customized_mail of this AdmissionGet.  # noqa: E501


        :return: The awareness_customized_mail of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_customized_mail

    @awareness_customized_mail.setter
    def awareness_customized_mail(self, awareness_customized_mail):
        """Sets the awareness_customized_mail of this AdmissionGet.


        :param awareness_customized_mail: The awareness_customized_mail of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_customized_mail = awareness_customized_mail

    @property
    def awareness_emailing(self):
        """Gets the awareness_emailing of this AdmissionGet.  # noqa: E501


        :return: The awareness_emailing of this AdmissionGet.  # noqa: E501
        :rtype: bool
        """
        return self._awareness_emailing

    @awareness_emailing.setter
    def awareness_emailing(self, awareness_emailing):
        """Sets the awareness_emailing of this AdmissionGet.


        :param awareness_emailing: The awareness_emailing of this AdmissionGet.  # noqa: E501
        :type: bool
        """

        self._awareness_emailing = awareness_emailing

    @property
    def awareness_other(self):
        """Gets the awareness_other of this AdmissionGet.  # noqa: E501


        :return: The awareness_other of this AdmissionGet.  # noqa: E501
        :rtype: str
        """
        return self._awareness_other

    @awareness_other.setter
    def awareness_other(self, awareness_other):
        """Sets the awareness_other of this AdmissionGet.


        :param awareness_other: The awareness_other of this AdmissionGet.  # noqa: E501
        :type: str
        """

        self._awareness_other = awareness_other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdmissionGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
