# coding: utf-8

"""
    Continuing Education API

    This API delivers data for the Continuing Education project.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FormationBasicGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acronym': 'str',
        'title_fr': 'str'
    }

    attribute_map = {
        'acronym': 'acronym',
        'title_fr': 'title_fr'
    }

    def __init__(self, acronym=None, title_fr=None):  # noqa: E501
        """FormationBasicGet - a model defined in OpenAPI"""  # noqa: E501

        self._acronym = None
        self._title_fr = None
        self.discriminator = None

        if acronym is not None:
            self.acronym = acronym
        if title_fr is not None:
            self.title_fr = title_fr

    @property
    def acronym(self):
        """Gets the acronym of this FormationBasicGet.  # noqa: E501


        :return: The acronym of this FormationBasicGet.  # noqa: E501
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this FormationBasicGet.


        :param acronym: The acronym of this FormationBasicGet.  # noqa: E501
        :type: str
        """

        self._acronym = acronym

    @property
    def title_fr(self):
        """Gets the title_fr of this FormationBasicGet.  # noqa: E501


        :return: The title_fr of this FormationBasicGet.  # noqa: E501
        :rtype: str
        """
        return self._title_fr

    @title_fr.setter
    def title_fr(self, title_fr):
        """Sets the title_fr of this FormationBasicGet.


        :param title_fr: The title_fr of this FormationBasicGet.  # noqa: E501
        :type: str
        """

        self._title_fr = title_fr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormationBasicGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
