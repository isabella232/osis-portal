# coding: utf-8

"""
    Continuing Education API

    This API delivers data for the Continuing Education project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdmissionListSerializer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'state': 'StateEnum',
        'state_text': 'str',
        'code': 'str',
        'academic_year': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'state': 'state',
        'state_text': 'state_text',
        'code': 'code',
        'academic_year': 'academic_year'
    }

    def __init__(self, uuid=None, state=None, state_text=None, code=None, academic_year=None):  # noqa: E501
        """AdmissionListSerializer - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._state = None
        self._state_text = None
        self._code = None
        self._academic_year = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if state is not None:
            self.state = state
        if state_text is not None:
            self.state_text = state_text
        if code is not None:
            self.code = code
        if academic_year is not None:
            self.academic_year = academic_year

    @property
    def uuid(self):
        """Gets the uuid of this AdmissionListSerializer.  # noqa: E501


        :return: The uuid of this AdmissionListSerializer.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AdmissionListSerializer.


        :param uuid: The uuid of this AdmissionListSerializer.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def state(self):
        """Gets the state of this AdmissionListSerializer.  # noqa: E501


        :return: The state of this AdmissionListSerializer.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AdmissionListSerializer.


        :param state: The state of this AdmissionListSerializer.  # noqa: E501
        :type: StateEnum
        """

        self._state = state

    @property
    def state_text(self):
        """Gets the state_text of this AdmissionListSerializer.  # noqa: E501


        :return: The state_text of this AdmissionListSerializer.  # noqa: E501
        :rtype: str
        """
        return self._state_text

    @state_text.setter
    def state_text(self, state_text):
        """Sets the state_text of this AdmissionListSerializer.


        :param state_text: The state_text of this AdmissionListSerializer.  # noqa: E501
        :type: str
        """

        self._state_text = state_text

    @property
    def code(self):
        """Gets the code of this AdmissionListSerializer.  # noqa: E501


        :return: The code of this AdmissionListSerializer.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AdmissionListSerializer.


        :param code: The code of this AdmissionListSerializer.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def academic_year(self):
        """Gets the academic_year of this AdmissionListSerializer.  # noqa: E501


        :return: The academic_year of this AdmissionListSerializer.  # noqa: E501
        :rtype: str
        """
        return self._academic_year

    @academic_year.setter
    def academic_year(self, academic_year):
        """Sets the academic_year of this AdmissionListSerializer.


        :param academic_year: The academic_year of this AdmissionListSerializer.  # noqa: E501
        :type: str
        """

        self._academic_year = academic_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdmissionListSerializer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
