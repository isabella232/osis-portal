# coding: utf-8

"""
    Continuing Education API

    This API delivers data for the Continuing Education project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FileListItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'size': 'int',
        'created_date': 'str',
        'uploaded_by': 'str',
        'path': 'str',
        'file_category': 'FileCategoryEnum',
        'file_category_text': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'size': 'size',
        'created_date': 'created_date',
        'uploaded_by': 'uploaded_by',
        'path': 'path',
        'file_category': 'file_category',
        'file_category_text': 'file_category_text'
    }

    def __init__(self, uuid=None, size=None, created_date=None, uploaded_by=None, path=None, file_category=None, file_category_text=None):  # noqa: E501
        """FileListItem - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._size = None
        self._created_date = None
        self._uploaded_by = None
        self._path = None
        self._file_category = None
        self._file_category_text = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if size is not None:
            self.size = size
        if created_date is not None:
            self.created_date = created_date
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by
        if path is not None:
            self.path = path
        if file_category is not None:
            self.file_category = file_category
        if file_category_text is not None:
            self.file_category_text = file_category_text

    @property
    def uuid(self):
        """Gets the uuid of this FileListItem.  # noqa: E501


        :return: The uuid of this FileListItem.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FileListItem.


        :param uuid: The uuid of this FileListItem.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def size(self):
        """Gets the size of this FileListItem.  # noqa: E501

        The size of the file in octets  # noqa: E501

        :return: The size of this FileListItem.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileListItem.

        The size of the file in octets  # noqa: E501

        :param size: The size of this FileListItem.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def created_date(self):
        """Gets the created_date of this FileListItem.  # noqa: E501


        :return: The created_date of this FileListItem.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FileListItem.


        :param created_date: The created_date of this FileListItem.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this FileListItem.  # noqa: E501


        :return: The uploaded_by of this FileListItem.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this FileListItem.


        :param uploaded_by: The uploaded_by of this FileListItem.  # noqa: E501
        :type: str
        """

        self._uploaded_by = uploaded_by

    @property
    def path(self):
        """Gets the path of this FileListItem.  # noqa: E501


        :return: The path of this FileListItem.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileListItem.


        :param path: The path of this FileListItem.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def file_category(self):
        """Gets the file_category of this FileListItem.  # noqa: E501


        :return: The file_category of this FileListItem.  # noqa: E501
        :rtype: FileCategoryEnum
        """
        return self._file_category

    @file_category.setter
    def file_category(self, file_category):
        """Sets the file_category of this FileListItem.


        :param file_category: The file_category of this FileListItem.  # noqa: E501
        :type: FileCategoryEnum
        """

        self._file_category = file_category

    @property
    def file_category_text(self):
        """Gets the file_category_text of this FileListItem.  # noqa: E501


        :return: The file_category_text of this FileListItem.  # noqa: E501
        :rtype: str
        """
        return self._file_category_text

    @file_category_text.setter
    def file_category_text(self, file_category_text):
        """Sets the file_category_text of this FileListItem.


        :param file_category_text: The file_category_text of this FileListItem.  # noqa: E501
        :type: str
        """

        self._file_category_text = file_category_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
