# coding: utf-8

"""
    Continuing Education API

    This API delivers data for the Continuing Education project.  # noqa: E501

    OpenAPI spec version: 0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdmissionPostPutPatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'birth_country': 'str',
        'citizenship': 'str',
        'formation': 'str'
    }

    attribute_map = {
        'birth_country': 'birth_country',
        'citizenship': 'citizenship',
        'formation': 'formation'
    }

    def __init__(self, birth_country=None, citizenship=None, formation=None):  # noqa: E501
        """AdmissionPostPutPatch - a model defined in OpenAPI"""  # noqa: E501

        self._birth_country = None
        self._citizenship = None
        self._formation = None
        self.discriminator = None

        if birth_country is not None:
            self.birth_country = birth_country
        if citizenship is not None:
            self.citizenship = citizenship
        if formation is not None:
            self.formation = formation

    @property
    def birth_country(self):
        """Gets the birth_country of this AdmissionPostPutPatch.  # noqa: E501


        :return: The birth_country of this AdmissionPostPutPatch.  # noqa: E501
        :rtype: str
        """
        return self._birth_country

    @birth_country.setter
    def birth_country(self, birth_country):
        """Sets the birth_country of this AdmissionPostPutPatch.


        :param birth_country: The birth_country of this AdmissionPostPutPatch.  # noqa: E501
        :type: str
        """

        self._birth_country = birth_country

    @property
    def citizenship(self):
        """Gets the citizenship of this AdmissionPostPutPatch.  # noqa: E501


        :return: The citizenship of this AdmissionPostPutPatch.  # noqa: E501
        :rtype: str
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this AdmissionPostPutPatch.


        :param citizenship: The citizenship of this AdmissionPostPutPatch.  # noqa: E501
        :type: str
        """

        self._citizenship = citizenship

    @property
    def formation(self):
        """Gets the formation of this AdmissionPostPutPatch.  # noqa: E501


        :return: The formation of this AdmissionPostPutPatch.  # noqa: E501
        :rtype: str
        """
        return self._formation

    @formation.setter
    def formation(self, formation):
        """Sets the formation of this AdmissionPostPutPatch.


        :param formation: The formation of this AdmissionPostPutPatch.  # noqa: E501
        :type: str
        """

        self._formation = formation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdmissionPostPutPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
